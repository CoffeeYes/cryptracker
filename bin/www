#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cryptracker:server');
var http = require('http');
var WebSocket = require('ws');

var ticker_table = require('../public/javascripts/ticker_table.js')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

var wss_bitfinex = new WebSocket('wss://api.bitfinex.com/ws/');

var ticker_data = {};
wss_bitfinex.on('message',function(message) {
  var result = JSON.parse(message);

  // if the result has a channelid, i.e is a subscription response, add it to the ticker_data object
  if(result.chanId) {
    ticker_data[result.chanId] = {
      'pair' : result.pair,
      'value' : 0
    }
  }
  //otherwise update the data in the ticker_data object, as long as it is not a heartbeat
  else if(!(result.event) && result[1] != 'hb') {
    ticker_data[result[0]].value = result[1]
  }
  setInterval(function() {
    console.log(ticker_data)
  },1000)
  /*
  if(result.length > 2) {
    io.emit('exchange data',result[1])
  }
  */
})

wss_bitfinex.on('open',function() {
  var tickers = ticker_table.table.Bitfinex.tickers;

  for(var i = 0; i < tickers.length; i++) {
    var msg = {
     "event":"subscribe",
     "channel":"ticker",
     "pair":tickers[i]
    }

    wss_bitfinex.send(JSON.stringify(msg))
  }
})

io.on('connection',function(socket) {
  console.log('user connected')
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
